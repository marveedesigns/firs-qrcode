import { generateQRCode } from "firs-einvoicing";

export default async function handler(req, res) {
  // CORS (optional)
  res.setHeader("access-control-allow-origin", "*");
  res.setHeader("access-control-allow-methods", "POST,GET,OPTIONS");
  res.setHeader("access-control-allow-headers", "content-type");
  if (req.method === "OPTIONS") { res.status(204).end(); return; }

  try {
    // Use your code exactly as-is
    async function createQRCode() {
      try {
        const { encryptedBase64, qrCodeDataUrl, qrCodeBuffer } = await generateQRCode({
          // NOTE: timestamp is auto-generated by the lib
          irn: "IRN123-0FD6C95D-20250609",
          certificate: "bEF0V3FJbmo5cVZYbEdCblB4QVpjMG9HVWFrc29GM2hiYWFkYWMyODRBUT0=",
          publicKey: "LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUFyU0xpdDRtb1RMbFdjd1A4eEp6RQp3ZTdkRHExdC9kMi9zcXdQTlNVandablFPbklabVh4TXY4QUQxemMxdUErZ3VCc2tpUGdoSXd6ekxWYXJoNk1KCndEdVUxSC95V2FPZE1PTnZOQy9OWERybXB5cE5WUDZyQnV3LzVjSERMdEtoZlJ0YkdFa1JSVVF4MVAxUUJ6REsKVVRpaTRJOXJld29zcVQ4V1dBOE8zRVd5ZHJ5TEg1K3JpVmRUNVBPeU1jcU95YUR2bGRqWG9ZdnBSTHlkcmtDQQpkUWpMdkw0bG00TVNxS05WdGVJR0Y4ZWk4M3Juck5wR3hKTVVGYVMwekt5TzBJZlY0alBCK3ZXN3I1TXdzTjRvCkRnWVR2ME85Q050N3JoNlEvYi9XR3Ewakl3WHJ3c3JIQXE4TXNyUVlGV0JIOHpmejMwOHRWMTlRM1hPTnEyWEMKMHdJREFRQUIKLS0tLS1FTkQgUFVCTElDIEtFWS0tLS0tCg==", // <- use full base64-of-PEM here
          size: 300,
          fgColor: "#000000",
          bgColor: "#00FFFF",
          logo: "https://example.com/logo.png",
          logoSizeRatio: 0.2,
        });

        // Return results instead of console.log (serverless response)
        return { encryptedBase64, qrCodeDataUrl, qrCodeBufferBase64: Buffer.from(qrCodeBuffer).toString("base64") };
      } catch (error) {
        throw new Error(error.message || String(error));
      }
    }

    const result = await createQRCode();
    res.status(200).json({ ok: true, ...result });
  } catch (e) {
    res.status(400).json({ ok: false, error: String(e && e.message ? e.message : e) });
  }
}